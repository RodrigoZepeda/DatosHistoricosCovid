con <- DBI::dbConnect(RMariaDB::MariaDB(),
user     = user,
password =  Sys.getenv("MariaDB_password"),
port     =  Sys.getenv("MariaDB_port"),
dbname   = "covidmx",
tblname  = tablename)
#Lectura del header
header <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_skip(),
#ID_REGISTRO        = col_character(),
ENTIDAD_UM          = col_double(),
#TIPO_PACIENTE       = col_character(),
#FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d"),
#FECHA_INGRESO       = col_date(format = "%Y-%m-%d"),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
#FECHA_DEF           = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
#CLASIFICACION_FINAL = col_character(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#Lectura del todo para comparar con el header
sqlposp <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_character(),
ENTIDAD_UM          = col_double(),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#SI la tabla no existe la creamos
dbres <- DBI::dbSendStatement(con, "SET sql_mode = 'NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER';")
dbClearResult(dbres)
#Write table
DBI::dbWriteTable(con, tablename, value = header, overwrite = T)
#Borramos a tabla si ya existe
dbres <- DBI::dbSendStatement(con, glue("DELETE FROM {tablename}"))
dbClearResult(dbres)
#Lectura de fecha de actualización sale más eficiente agregar al final
fecha_act <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"), n_max = 1,
trim_ws = TRUE,
col_types =
cols(.default = col_skip(),
FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d")))
file.rename(filecon, glue("./{tablename}.csv"))
filecon
#Generamos la tabla a partir del csv
col_positions <- which(colnames(sqlposp) %in% colnames(header))
columns_sql   <- paste0("@col", col_positions, collapse = ",")
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
#Leemos la conexión
dats <- dplyr::tbl(con, tablename)
glimpse(dats)
columns_sql
paste0("@", sqlposp[col_positions], collapse = ",")
sqlposp[col_positions]
paste0("@", colnames(sqlposp)[col_positions], collapse = ",")
columns_sql   <- paste0("@", colnames(sqlposp)[col_positions], collapse = ",")
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
#Leemos la conexión
dats <- dplyr::tbl(con, tablename)
dats %>% glimpse()
dats %>% distinct(ENTIDAD_UM)
#Borramos a tabla si ya existe
dbres <- DBI::dbSendStatement(con, glue("DELETE FROM {tablename}"))
dbClearResult(dbres)
#Generamos la tabla a partir del csv
col_positions <- which(colnames(sqlposp) %in% colnames(header))
columns_sql   <- paste0(colnames(sqlposp)[col_positions], collapse = ",")
columns_sql
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
col_positions <- colnames(sqlposp) %in% colnames(header)
col_positions
col_positions[!col_positions] <- "@ignore"
#Generamos la tabla a partir del csv
col_positions                 <- colnames(sqlposp) %in% colnames(header)
col_positions[!col_positions] <- "@ignore"
col_positions
colnames(header)
col_positions[which(col_positions == "TRUE")] <- colnames(header)
col_positions
columns_sql <- paste0(col_positions, collapse = ",")
#Borramos a tabla si ya existe
dbres <- DBI::dbSendStatement(con, glue("DELETE FROM {tablename}"))
dbClearResult(dbres)
#Generamos la tabla a partir del csv
col_positions                                 <- colnames(sqlposp) %in% colnames(header)
col_positions[!col_positions]                 <- "@ignore"
col_positions[which(col_positions == "TRUE")] <- colnames(header)
columns_sql <- paste0(col_positions, collapse = ",")
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
#Leemos la conexión
dats <- dplyr::tbl(con, tablename)
glimpse(dats)
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]])
tibble_report
tibble_report %>% write_excel_csv("Datos_Historicos.csv")
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
bases_datos
fechas_df
fechas_df   <- unique(historicos$FECHA_ACTUALIZACION)
fechas_df
year(fechas_df)
library(lubridate)
fechas_df
year(fechas_df)
fechas_df
fechas_df
glue("{day(fechas_df)}.{month(fechas_df)}.{year(fechas_df)}")
dia         <- as.character(day(fechas_df))
dia         <- as.character(day(fechas_df))
dia         <- ifelse(nchar(dia) == 1, paste0("0",dia),dia)
dia
mes         <- as.character(month(fechas_df))
mes
ifelse(nchar(mes) == 1, paste0("0",mes),mes)
mes         <- ifelse(nchar(mes) == 1, paste0("0",mes),mes)
?str_detect
str_detect(bases_datos, glue("{dia}.{mes}.{year(fechas_df)}"))
bases_datos
glue("{dia}.{mes}.{year(fechas_df)}")
str_detect(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fechas_df)}.zip"))
str_which(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fechas_df)}.zip"))
pos
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
fechas_df   <- unique(historicos$FECHA_ACTUALIZACION)
for (fecha in fechas_df){
dia <- as.character(day(fecha))
dia <- ifelse(nchar(dia) == 1, paste0("0",dia),dia)
mes <- as.character(month(fecha))
mes <- ifelse(nchar(mes) == 1, paste0("0",mes),mes)
pos <- str_which(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fecha)}.zip"))
if (length(pos) > 0){
bases_datos <- bases_datos[-pos]
}
}
pos
fecha
fechas_df
fechas_df
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
fechas_df   <- unique(historicos$FECHA_ACTUALIZACION)
fechas_df
unique(historicos$FECHA_ACTUALIZACION)
as.Date(fechas_df)
as.Date(fecha)
seq_along(fechas_df)
as.list(fechas_df)
for (fecha in as.list(fechas_df)){
dia <- as.character(day(fecha))
dia <- ifelse(nchar(dia) == 1, paste0("0",dia),dia)
mes <- as.character(month(fecha))
mes <- ifelse(nchar(mes) == 1, paste0("0",mes),mes)
pos <- str_which(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fecha)}.zip"))
if (length(pos) > 0){
bases_datos <- bases_datos[-pos]
}
}
bases_datos <- list.files(zip_files, pattern = "datos_abiertos_covid19_.*zip",
full.names = TRUE)
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
fechas_df   <- unique(historicos$FECHA_ACTUALIZACION)
length(bases_datos)
for (fecha in as.list(fechas_df)){
dia <- as.character(day(fecha))
dia <- ifelse(nchar(dia) == 1, paste0("0",dia),dia)
mes <- as.character(month(fecha))
mes <- ifelse(nchar(mes) == 1, paste0("0",mes),mes)
pos <- str_which(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fecha)}.zip"))
if (length(pos) > 0){
bases_datos <- bases_datos[-pos]
}
}
length(bases_datos)
db <- bases_datos[1]
message(glue("Unzipping {db}"))
fdownload <- tempfile()
system2(unzip_command, args = c(unzip_args, db))
filecon <- list.files(pattern = "*COVID19MEXICO.csv", full.names = T)[1]
filecon
#Create table if not exists
con <- DBI::dbConnect(RMariaDB::MariaDB(),
user     = user,
password =  Sys.getenv("MariaDB_password"),
port     =  Sys.getenv("MariaDB_port"),
dbname   = "covidmx",
tblname  = tablename)
#Lectura del header
header <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_skip(),
#ID_REGISTRO        = col_character(),
ENTIDAD_UM          = col_double(),
#TIPO_PACIENTE       = col_character(),
#FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d"),
#FECHA_INGRESO       = col_date(format = "%Y-%m-%d"),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
#FECHA_DEF           = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
#CLASIFICACION_FINAL = col_character(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#Lectura del todo para comparar con el header
sqlposp <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_character(),
ENTIDAD_UM          = col_double(),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#SI la tabla no existe la creamos
dbres <- DBI::dbSendStatement(con, "SET sql_mode = 'NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER';")
dbClearResult(dbres)
#Write table
DBI::dbWriteTable(con, tablename, value = header, overwrite = T)
#Borramos a tabla si ya existe
dbres <- DBI::dbSendStatement(con, glue("DELETE FROM {tablename}"))
dbClearResult(dbres)
#Lectura de fecha de actualización sale más eficiente agregar al final
fecha_act <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"), n_max = 1,
trim_ws = TRUE,
col_types =
cols(.default = col_skip(),
FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d")))
if (file.exists(glue("./{tablename}.csv"))){
file.remove(glue("./{tablename}.csv"))
}
file.rename(filecon, glue("./{tablename}.csv"))
#Generamos la tabla a partir del csv
col_positions                                 <- colnames(sqlposp) %in% colnames(header)
col_positions[!col_positions]                 <- "@ignore"
col_positions[which(col_positions == "TRUE")] <- colnames(header)
columns_sql <- paste0(col_positions, collapse = ",")
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
#Leemos la conexión
dats <- dplyr::tbl(con, tablename)
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]])
tibble_report
historicos
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
tibble_report %>%
bind_rows(historicos)
tibble_report %>%
mutate(n = as.double(n)) %>%
bind_rows(historicos)
tibble_report %>%
mutate(n = as.double(n)) %>%
bind_rows(historicos)
historicos
historicos %>% pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM))
?pivot_wider
historicos %>% pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM), names_from = FECHA_ACTUALIZACION)
historicos %>% pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n)
historicos %>% pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n) %>% write_excel_csv("Datos_Historicos.csv")
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
historicos
which(colnames(historicos) %in% c("FECHA_SINTOMAS","ENTIDAD_UM"))
which(!(colnames(historicos) %in% c("FECHA_SINTOMAS","ENTIDAD_UM")))
fechas_df   <- colnames(historicos)[which(!(colnames(historicos) %in% c("FECHA_SINTOMAS","ENTIDAD_UM")))]
fechas_df
tibble_report
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]]) %>%
pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n)
tibble_report
historicos
tibble_report %>%
left_join(historicos, by = c("FECHA_SINTOMAS", "ENTIDAD_UM"))
tibble_report %>%
full_join(historicos, by = c("FECHA_SINTOMAS", "ENTIDAD_UM"))
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]]) %>%
pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n)
tibble_report %>%
full_join(historicos, by = c("FECHA_SINTOMAS", "ENTIDAD_UM")) %>%
mutate_if(is.numeric, coalesce, 0)
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]]) %>%
mutate(n = as.double(n)) %>%
pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n)
tibble_report %>%
full_join(historicos, by = c("FECHA_SINTOMAS", "ENTIDAD_UM")) %>%
mutate_if(is.numeric, coalesce, 0)
tibble_report %>% write_excel_csv("Datos_Historicos.csv")
dbDisconnect(con)
rm(list = ls())
library(glue)
library(lubridate)
library(tidyverse)
library(DBI)
zip_files     <- "/media/rodrigo/covid/datasets/" #Directory where the zip files are
unzip_command <- "unzip" #Set the path to `where 7zip`
unzip_args    <- "-o" #-x on windows
tablename     <- "covidmxhistoric"
nthreads      <- 2
user          <- Sys.getenv("MariaDB_user")
password      <- Sys.getenv("MariaDB_password")
bases_datos <- list.files(zip_files, pattern = "datos_abiertos_covid19_.*zip",
full.names = TRUE)
#Leemos la info que ya tenemos de históricos
historicos  <- read_csv("Datos_Historicos.csv")
fechas_df   <- colnames(historicos)[which(!(colnames(historicos) %in% c("FECHA_SINTOMAS","ENTIDAD_UM")))]
for (fecha in as.list(ymd(fechas_df))){
dia <- as.character(day(fecha))
dia <- ifelse(nchar(dia) == 1, paste0("0",dia),dia)
mes <- as.character(month(fecha))
mes <- ifelse(nchar(mes) == 1, paste0("0",mes),mes)
pos <- str_which(basename(bases_datos),
glue("datos_abiertos_covid19_{dia}.{mes}.{year(fecha)}.zip"))
if (length(pos) > 0){
bases_datos <- bases_datos[-pos]
}
}
#Leemos la base histórica, subimos a MARIADB y tibbleamos
for (db in bases_datos){
message(glue("Unzipping {db}"))
fdownload <- tempfile()
system2(unzip_command, args = c(unzip_args, db))
filecon <- list.files(pattern = "*COVID19MEXICO.csv", full.names = T)[1]
#Create table if not exists
con <- DBI::dbConnect(RMariaDB::MariaDB(),
user     = user,
password =  Sys.getenv("MariaDB_password"),
port     =  Sys.getenv("MariaDB_port"),
dbname   = "covidmx",
tblname  = tablename)
#Lectura del header
header <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_skip(),
#ID_REGISTRO        = col_character(),
ENTIDAD_UM          = col_double(),
#TIPO_PACIENTE       = col_character(),
#FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d"),
#FECHA_INGRESO       = col_date(format = "%Y-%m-%d"),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
#FECHA_DEF           = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
#CLASIFICACION_FINAL = col_character(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#Lectura del todo para comparar con el header
sqlposp <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"),
n_max = 1,
trim_ws = TRUE,
col_types = readr::cols(
.default            = col_character(),
ENTIDAD_UM          = col_double(),
FECHA_SINTOMAS      = col_date(format = "%Y-%m-%d"),
RESULTADO_LAB       = col_double(),
RESULTADO           = col_double(),
RESULTADO_ANTIGENO  = col_double(),
))
#SI la tabla no existe la creamos
dbres <- DBI::dbSendStatement(con, "SET sql_mode = 'NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER';")
dbClearResult(dbres)
#Write table
DBI::dbWriteTable(con, tablename, value = header, overwrite = T)
#Borramos a tabla si ya existe
dbres <- DBI::dbSendStatement(con, glue("DELETE FROM {tablename}"))
dbClearResult(dbres)
#Lectura de fecha de actualización sale más eficiente agregar al final
fecha_act <- readr::read_csv(filecon, locale = readr::locale(encoding = "UTF-8"), n_max = 1,
trim_ws = TRUE,
col_types =
cols(.default = col_skip(),
FECHA_ACTUALIZACION = col_date(format = "%Y-%m-%d")))
if (file.exists(glue("./{tablename}.csv"))){
file.remove(glue("./{tablename}.csv"))
}
file.rename(filecon, glue("./{tablename}.csv"))
#Generamos la tabla a partir del csv
col_positions                                 <- colnames(sqlposp) %in% colnames(header)
col_positions[!col_positions]                 <- "@ignore"
col_positions[which(col_positions == "TRUE")] <- colnames(header)
columns_sql <- paste0(col_positions, collapse = ",")
system(glue::glue("mysqlimport --default-character-set=UTF8",
" --fields-terminated-by=','",
" --ignore-lines=1",
" --fields-enclosed-by='\"'",
" --lines-terminated-by='\\n'",
" --user={user}",
" --password={password}",
" --use-threads={nthreads}",
" --columns={columns_sql}",
" --local covidmx ./{tablename}.csv"))
#Leemos la conexión
dats <- dplyr::tbl(con, tablename)
#Creamos el tibble
#Antes del 28 de noviembre 2020 se incluía la variable resultado = 1 si covid
#a partir de otro día se incluye CLASIFICACION_FINAL = 1,2 ó 3 para covid
#y en algún momento intermedio hubo otra CLASIFICACION_FINAL
tibble_report <- dats %>%
filter(if_any(starts_with("RESULTADO"), ~ (.x == 1))) %>%
group_by(FECHA_SINTOMAS, ENTIDAD_UM) %>%
tally() %>%
collect() %>%
mutate(FECHA_ACTUALIZACION = as.vector(!!fecha_act)[[1]]) %>%
mutate(n = as.double(n)) %>%
pivot_wider(id_cols = c(FECHA_SINTOMAS, ENTIDAD_UM),
names_from = FECHA_ACTUALIZACION, values_from = n)
tibble_report <- tibble_report %>%
full_join(historicos, by = c("FECHA_SINTOMAS", "ENTIDAD_UM")) %>%
mutate_if(is.numeric, coalesce, 0)
tibble_report %>% write_excel_csv("Datos_Historicos.csv")
dbDisconnect(con)
}
suppressMessages(system2("which","python"))
library(ghostpdf)
devtools::install_github("RodrigoZepeda/ghostpdf")
detect_ghostscript()
library(ghostpdf)
detect_ghostscript()
